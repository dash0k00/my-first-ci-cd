name: CI/CD Pipeline with SAST

# Запускаем пайплайн при каждом пуше в ветки main или master
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Настраиваем окружение Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Шаг 3: Устанавливаем зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Build project
        run: |
          echo "Build started"
          echo "Build finished successfully"

        # Шаг 3.1: Запускаем проверку стиля кода с flake8
      - name: Run flake8 linting
        run: |
          pip install flake8
          flake8 . --count --show-source --statistics --exit-zero

      # Шаг 4: Запускаем SAST-сканер (Bandit)
      - name: Run Bandit SAST Scan
        run: |
          pip install bandit
          bandit -r . --exclude ./venv --severity-level high --confidence-level high -f json -o bandit_results.json || true

      # Шаг 4.1: Анализируем отчет Bandit
      - name: Check Bandit Results
        id: bandit-check
        run: |
          if [ -f bandit_results.json ]; then
            if jq -e '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH")' bandit_results.json; then
              echo "Bandit found critical vulnerabilities! Failing the pipeline."
              exit 1
            else
              echo "No critical vulnerabilities found by Bandit."
            fi
          else
            echo "Bandit report not found. Assuming no issues."
          fi

      # ЗАДАНИЕ 1: Сохраняем отчет Bandit как артефакт
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-scan-results
          path: bandit_results.json
          retention-days: 7

      # Шаг 5: Запускаем сканер зависимостей Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1" # Пайплайн упадет, если Trivy найдет уязвимости
          ignore-unfixed: true # Игнорировать уязвимости, для которых нет фикса
          severity: "HIGH,CRITICAL" # Проверять только на критические уязвимости

      # Шаг 6: Запускаем наши unit-тесты
      - name: Run Tests with pytest
        run: |
          python -m pytest tests/ -v
  # ЗАДАНИЕ 3: Задача для сборки
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout #получение кода
        uses: actions/checkout@v4

      - name: Setup Python # настройка окружения
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Build
        run: echo "Build completed"
